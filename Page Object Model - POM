Page Object Model (POM) - 
Page Object Model is a design pattern to create Object Repository for web UI elements.
It is basically an object design pattern to create repository for web elements. 
Maintain elements in a centralized location like a repository. 
Access elements directly from this repository. 
Under this model, Container classes for web elements are created that behave as object repository.
Under this model, for each web page in the application, there should be corresponding page class.
POM can be created in 2 ways - without page factory and with page factory
Allows reusability of elements, hence reduces code size thereby increasing performance and efficiency or the program

Without Page Factory:
-------------------------
To create POM:
By <variableName> = By.elementLocator(<Value>);

Eg. - 
<In first class we define the elements and their actions>:
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;

public class pageObjectModel {
		//Syntax:
		//By <variableName> = By.elementLocator(<Value>);
	    WebDriver abcd;
 
		By username = By.name("username");
		By password = By.name("password");
		By loginButton = By.id("tdb1");

		public pageObjectModel(WebDriver abcd) { //Name of this constructor MUST be same as name of the class
			this.abcd = abcd;
		}
		//Create User Actions
		public void typeUsername(String Uname) {
			abcd.findElement(username).sendKeys(Uname);
		}
		public void captureUsername(){
			abcd.findElement(username).getAttribute("value"); 
		}

		public void clearUsername() {
			abcd.findElement(username).clear();
		}

		public void typePassword(String pwd) {
			abcd.findElement(password).sendKeys(pwd);
		}

		public void clickButton() {
			abcd.findElement(loginButton).click();
		}
}

With Page Factory:
------------------------
We use the same concept of having the objects & related operations in a separate file, with the exception that elements are 
located using the @FindBy annotation. This annotation supports all regular locators.
Also, an initElements method is called in the constructor which will create all the elements once invoked.
The methods in the object file can be called in using the same process as earlier - create an object of the file and invoke.
(
in this ex.:
pageObjModel pom = new pageObjectModel();
pom.setUserName("faiz1985@gmail.com");
pom.setPwd("...");
pom.clickLoginBtn();
)

Eg., in the page object factory file:

public class pageObjModel {
	WebDriver driver;
	
	@FindBy(name="username")
	WebElement uname;
	
	@FindBy(name="password")
	WebElement pwd;
	
	@FindBy(className="_1q0oQo76jB7KFKWPCMPzDW")
	WebElement clkBtn;
	
	public pageObjModel(WebDriver driver) {
		this.driver=driver;
		PageFactory.initElements(driver, this);
	}
	
	public void setUserName(String usrName) {
		uname.sendKeys("faiz1985@gmail.com");
	}
	
	public void setPwd(String passwd) {
		pwd.sendKeys("Novem*2018");
	}
	
	public void clickLoginBtn() {
		clkBtn.click();
	}
	
}
