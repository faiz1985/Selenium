Locators
Selenium supports 8 element locators:
id
name
className
tagName
linkText
partialLinkText
cssSelector
xpath - used to find the location of elements on the web page using HTML DOM structure. It is slower in execution, so should be the 
last preference.

Absolute xpath - defines the path of the element beginning from the root node and traverses through all child nodes. Uses / only/ Eg - 
html/body/div/div[2]/div/div/div/div/div[1]/div/input
Relative xpath - defines the path of the element beginning from anywhere within the HTML document. Uses // and not / .Eg - 
//input[@id = 'username']
Selenium also allows the use of multiple identifiers in case one of the identifier is repeated multiple times but the combination is unique:
//input[@id = 'username' and @class='classname']
These are written by deriving from HTML path. For the above xpath, the HTML structure (locate on page inspect) is similar to:
<input id="username class="classname" .....> </input>
Relative xpath is more preferred since it can identify elements even if UI changes occur

To locate an element partially matching its attribute values in xpath, use the contains method. This is useful when attributes have
dynamic values but a certain part is still constant. Eg:
xPathExpression = //*[contains(@name, 'user')]

To locate element using text in xpath:
xPathExpression = //*[text()='username']

Difference between cssSelector and xPath - xPath allows to traverse up or down in the HTML whereas cssSelector allows only downward navigation


Categories of Selenium webDriver Commands:
1. Browser Regular Commands
2. Browser Navigation Commands
3. Regular commands on web elements
4. Verification commands
5. Others
Page Object Model (POM):
Page Object Model is a design pattern to create Object Repository for web UI elements. 
Maintain elements in a centralized location, allows to access elements directly from created repository. 
Under this model, Container classes for web elements are created that behave as object repository.
POM can be created in 2 ways - without page factory and with page factory
Page class will find the WebElements of that web page and also contains Page methods which perform operations on those WebElements. 
Allows re-usability of elements, hence reduces code size thereby increasing performance and efficiency or the program

To create POM without page factory:
By <variableName> = By.elementLocator(<Value>);
By username = By.name(“username”);
By btn = By.id(“tdb1”);

To create POM with Page Factory, we use the @FindBy Annotation:
@FindBy(name=”username”)
WebElement username;
@FindBy(id=”tdb1”)
WebElement btn;

When Page Factory is used, we need to call the initElements method in constructor to create the objects:
this.driver=driver; PageFactory.initElements(driver, this);

If we know that element is always present on the page then it is best to use the following declaration:
@FindBy(how=How.xpath, using=" //*[@id='account_logout']/a ")
@CacheLookup
WebElement pwd;
Without this, every time when we turn to our element, WebDriver will check if the element is present on the page or not, hence 
reducing performance.

Why use Page Factory POM vs. POM without Page Factory – using Page Factory model, all the objects are initialized at the start of 
the script when the initElements method is called. If using POM without a Page Factory, the elements are initialized as and when 
they are called, thus reducing performance.

Advantages of POM:
•	Easy to Maintain
•	Easy Readability of scripts
•	Reduce or Eliminate duplicacy
•	Re-usability of code
•	Reliability
TestNG
TestNG is a framework which enables us to group test cases, prioritize cases, execute batches, generate reports.
Advantages of TestNG:
1. TestNG Annotations are easy to create test cases.
2. Test Cases can be grouped and prioritized more easily and effectively.
3. Executing multiple programs or classes using XML file.
4. Parallel Testing is supported.
5. Generates test reports that are not present by default in Selenium.
main method is not used in TestNG programs
TestNG programs contain methods only that are made up of annotations
if we don't write @Test annotation, then the test case won’t be executed
TestNG verification methods can be used instead of if statements - Assert statements
TestNG will execute functions within a class in alphabetical order. To change this, use the 'priority', 'dependsOnMethods' or 
'alwaysRun' attribute.

Choose the right attribute:
1. If there is no functionality dependency between cases or methods -> priority attribute
2. If there is functionality dependency between cases or methods -> dependsOnMethods attribute
3. If there is functionality dependency between some cases only -> alwaysRun attribute

TestNG Common Annotations:
@Test - denotes a test case
@BeforeMethod - the annotated method will be run before each test case. This is like a common pre condition. 
Eg - open a browser before each URL navigation.
@AfterMethod - annotated method will be run after each test case. This is like a common post condition. 
Eg - close a browser after each URL navigation.
This is method level annotation.

@BeforeTest - Annotated method will be the first to run before any test method in a group is executed.
@AfterTest - Annotated method will run after all test methods in a group are executed inside the tag. 
This is a group level annotation.

@BeforeClass - Annotated method will run as the first test method in the current class
@AfterClass - Annotated method will run after all the test methods in the current class
In @AnnotationsProgram (replace method with class in the annotation), launchBrowser is executed just once before any of the 
method is run; and closeBrowser is run just once after all the methods are executed.
This is class level annotation.

@DataProvider indicates that the function will be a source of data. The data can come from any of the following sources:
1. Excel Files
2. Config.properties file using properties class
3. Define data within the method
4. testng.XML or any other XML file
@DataProvider
public void dataSource(){..method definition..}

@Test(dataProviderName = "dataSource")
Public void dataConsumer() {..method definition..}

TestNG XML structure

<suite name="suiteName">
	<test name="testName">
		<classes>
			<class name="package.class1Name"/>
			<class name="package.class2Name"/>
			<class name="package.class3Name"/>
			.
			.
		</classes>
	</test>
</suite>

If we want to run particular groups only, the TestNG XML file should be updated to include the groups and run tags:
<suite name="SuiteName">
	<test name="testName">
		<groups>
		<run>
			<include name="GroupName">
		</run>
		<classes>
			<class name="package.class1Name"/>
			<class name="package.class2Name"/>
			.
			.
			</classes>
		</groups>
	</test>
</suite>

If we want to run tests in parallel, modify the testng.xml as below (thread-count indicates how many tests to run in parallel):
<suite name="suiteName" parallel="methods" thread-count='2'>
	<test name="testName">
		<classes>
			<class name="packageName.className"/>
			.
			.
		</classes>
	</test>
</suite>

If we want to exclude any particular test case from running, use the exclude tag:
<suite name="suiteName">
	<test name="testName">
		<classes>
			<class name="package.class1Name"/>
				<methods>
					<exclude name="testToBeExcluded"/>
					.
					.
				</methods>
			<class name="package.class2Name"/>
			.
			.
		</classes>
	</test>
</suite>

If we want to run only selected cases from a large suite of 100+ cases, use the include tag same as the exclude tag as above.

Groups are defined at method level as follows:
@Test(groups={"sanity", "regression"}, priority=1)
Maven
Maven is a build automation tool used for creating and maintaining environment configuration.
Maven is a build / project management tool, based on the concept of a page object model (POM) that contains information of 
project and configuration information for the maven to build the project such as dependencies, build directory, source directory, 
test source directory, plugin, goals etc.
Maven defines a standard way to build the projects, test, and deploy project artifacts. It provides a framework that enables 
easy reuse of common build logic for all projects following Maven's standards

Maven Steps:
Maven is a powerful project / build management tool, based on the concept of a POM (Project Object Model) that includes 
project information and configuration information for Maven such as construction directory, source directory, dependency, 
test source directory, Goals, plugins, etc.
Using pom.xml(Maven) you can configure dependencies needed for building testing and running code.
Maven automatically downloads the necessary files from the repository while building the project

Steps to create Maven:
1. Create Maven Project (built in eclipse IDE)
2. Add all software dependencies to Maven POM XML so that Maven can download the s/w & add to project. Barebone POM XML file tags:
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>newMvn</groupId>
  <artifactId>mvnArt</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>MavenProj</name>
  <description>TrialMaven</description>
<dependencies>
	<!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
	<dependency>
		<groupId>org.seleniumhq.selenium</groupId>
		<artifactId>selenium-java</artifactId>
		<version>3.14.0</version>
	</dependency>
	<!-- https://mvnrepository.com/artifact/org.testng/testng -->
	<dependency>
		<groupId>org.testng</groupId>
		<artifactId>testng</artifactId>
		<version>6.14.3</version>
		<scope>test</scope>
	</dependency>
</dependencies>
</project>

Maven POM XML file
POM XML file of maven can be used to run a TestNG suite by invoking the testng.xml (or any other XML) file. In the POM XML, 
add the below tags after dependencies:
<profiles>
	<profile>
		<id>SmokeSuite</id>
		<build>
			<plugins>
				<plugin>
					<groupID>groupID</groupID>
					<artifactID>AID</artifactID>
					<version>vsn</version>
					<configuration>
						<suiteXmlFiles>
							<suiteXMLFile>testng.xml</suiteXMLFile>
							<suiteXMLFile>Regression.xml</suiteXMLFile>
							.
							.
						</suiteXmlFiles>
					</configuration>
				</plugin>
			</plugins>
		</build>
	</profile>
</profiles>

groupId is usually analogous to a package name.
artifactId is usually analogous to class name and this will be used while packing it as a jar or war.
version is just a number to differentiate the history.
Jenkins
Jenkins is an open source tool for continuous integration purpose.  
Continuous integration is a process in which all development work is integrated as early as possible. 
The principle functionality of Jenkins is to keep a track of version control system.
Running Selenium tests in Jenkins allows you to run your tests every time your software changes and deploy the software to a 
new environment when the tests pass.
Jenkins can schedule tests to run at specific time and / or when a specific action / state is triggered.
Jenkins is integrated with 2 components -> Build tool like ant ,maven etc. & Version control system like SVN, GIT.

Advantage of Jenkins include:
At integration stage, build failures are cached
For each code commit changes an automatic build report notification generates
To notify developers about build report success or failure, it is integrated with LDAP mail server
Achieves continuous integration agile development and test driven development
With simple steps, maven release project is automated
Easy tracking of bugs at early stage in development environment than production

A Jenkins Pipeline is a set of plugins that support continuous integration and implementation in the Jenkins. It gives us the 
view of stages or tasks to perform one after the other in pipeline form
The Jenkins pipeline details are stored in a file that is named as the Jenkins file and it is further connected to the source 
code repository.

Common directives in Jenkins pipeline file:
Agent: – It is directive to tell Jenkins to execute the pipeline in particular manner and order.
The agent directive tells Jenkins where and how to execute the Pipeline, or subset thereof.
Post: - post section defines one or more additional steps that are run upon the completion of a Pipeline’s or stage’s run
Stage:- the stages section is where the bulk of the "work" described by a Pipeline will be located. 
Environment:- environment directive specifies a sequence of key-value pairs which will be defined as environment variables for 
the all steps, or particular steps of the pipeline.
Input:- input directive on a stage allows you to prompt for input, using the input step. The stage will pause after any options 
have been applied, and before entering the stage`s `agent or evaluating its when condition. If the input is approved, the stage 
will then continue. 


Start Jenkins - type in command prompt: java -jar jenkins.war
Once the service is up and running, access Jenkins via the URL http://localhost:8080 or the company provided URL
Manage Jenkins -> Configure System -> Set the Java Home Path and email parameters
Under Build, use one the four options to run Jenkins:
1. Windows Batch Command
2. Execute Shell
3. Invoke Ant
4. Invoke Maven

To invoke test using batch command:
Create TestNG XML in the same folder where we have the lib and bin folders
In Notepad create a new file, save it as run.bat with contents as java -cp bin;libs/* org.testng.TestNG.xml

To invoke test using Maven:
Under the configuration section that opens when you click on 'Invoke Maven':
1. Enter the path of the POM.XML file
2. Under Goals, provide the maven commands without the 'mvn' keyword. Eg, test - will run the tests specified in testng.xml file 
in POM.XML (under the suiteXmlFile tag)
3. If multiple profiles are present in the POM.XML, invoke using the name specified in the ID tag of the profile section in POM.XML. 
Eg, if ID tag has value of sanity, command would be test –Psanity

To invoke test periodically:
Under build triggers select ‘build periodically’ option and enter the cron schedule:
MINUTE (0-59), HOUR (0-23), DAY (1-31), MONTH (1-12), DAY OF THE WEEK (0-7)
Jenkins also supports convenient aliases as @yearly, @annually, @monthly, @weekly, @daily, @midnight, and @hourly.
The letter H, representing the word Hash can be inserted instead of any of the values. For eg., start a build first of every 
month between 2:00 a.m. - 02:30 a.m.: H(0,30) 02 01 * *
H/5 3,21 * * 1-5 - is Every five minutes between 03:00 and 03:59 and then between 21:00 and 21:59 on Mon -> Fri but starting 
at some 'random' time.
Integration of all components to build a framework-
Simple steps for framework using testNG, Maven & Jenkins:
Create New Java Project
Optional but recommended - 
	Link the project to repository like git (right click on project -> team -> share project -> create new repository -> Finish. 
	Right Click project -> Team -> Commit -> select all files from staged area and add -> enter commit message -> Commit & Push
		if it is first time then a dialog box will open in which you need to enter the git URL and credentials
Create TestNG Class
Optional but recommended - Create Object Repository POM file(s)
Optional but recommended - Create config properties file to define parameters
Update testng.xml to include or exclude suites/classes/tests.
	TestNG file can also be used to define suite level or class level parameters
Import into new Maven Project
Update pom.xml to include or exclude desired testng.xml's (there may be multiple testng XMLs based on project need)
Create new freestyle project in Jenkins -> Build -> Invoke tope level Maven Projects -> Enter the goals as test -PSuiteName or 
compile or any other maven command. the command need not be prefixed with mvn, Jenkins will automatically add that during build
	Add as many Goals as required and save (this may be used for invoking multiple suites within POM.XML)
	Jenkins can also be configured to run build each time new code is committed
Build now will run all the goals.

Java Project -> TestNG Class -> testng.xml -> (create page object model with or without factory) -> (create config properties 
file to define parameters) -> (Integrate with Git) -> Maven Project -> POM.xml -> Jenkins Freestyle Project -> Build

Interview Questions
Framework implementation:
We are using JAVA as our scripting language
We are using the TestNG framework and annotations to define our tests
We are using Page Object Model with Page Factory framework
We maintain a page class for every page in our application 
We have a base page class for common functions use by all pages
For static variables, we are passing the values by parameterizing TestNG xml file or through a config.properties file by 
using Selenium's Properties class
We are using standardized maven project for dependency management
We are using Jenkins to automate the smoke or regression suite run of test case
12/21/2018
Client ETS, Employer UBS
1. Explain how selenium framework implemented in current project.
2. Elaborate on Jenkins implementation in the current project.
3. Significance of POM.XML file in Jenkins implementation.
4. Scheduler Types in Jenkins - Windows bat file and invoke Maven.
5. How dependencies are defined in Jenkins - POM.XML
6. How is data (not test data, config data) fed into the scripts - config.properties, testng.xml
7. Why is Maven integration required for Jenkins - with help of Maven, the build process can trigger the defined TestNG 
file and invoke tests.
8. What repository are you using, and how is it configured in Jenkins - under configurations section of Jenkins, Enter 
the GIT URL and credentials.

1/2/2019
Client ETS, Employer UBS – Round 3
1.	What is Headless Browser testing?
Use HtmlUnitDriver which is a non GUI driver and does not launch any browser to execute scripts. This driver is faster than other
drivers like chromedriver, IEDriver etc.
2.	If a UAT code is checked in, how can we run scripts in test env? We just define the UAT environment URL in the 
properties file or the testing file, parameters section and call the tests accordingly.
3.	How do we separate tests based on browser? Where is browser defined and how it can be used to run particular test 
on that browser?
4. 	How to wait until a particular element is loaded before performing an operation on it?
By addItem = By.xpath("//input[.='Add Item']");
// get the "Add Item" element
WebElement element = wait.until(ExpectedConditions.presenceOfElementLocated(addItem));
element.sendKeys("abc");

@Parameter(“browser”) //this comes from the parameters section of testng XML file
Public void setup(String browser) {
If(browser.equalsIgnoreCase(“Chrome”)){ WebDriver driver = new ChromeDriver(); }
Else if(browser.equalsIgnoreCase(“ie”)){ WebDriver driver = new InternetExplorerDriver(); }

5/30/2019
------------
Navy Mutual (through Johnson)
1. Difference between findElement and findElements
	findElement returns a single web element; findElements returns a list of web elements.
2. Frame commands and operations
3. How automation engagement is executed in QA
Ans - If in agile, very less time to create scripts so a basic skeleton script is created based on a document provided by AD. This doc,
called as a Wireframe contains info about the different pages and/or objects and we design scripts based on this info. However, these
scritps cannot be tested until the actual code is in place with the values for element locators.
4. What kind of framework, and why chose that one?
5. Questions related to EBIX and ALIP
6. Common challenges in Selenium/Automation?
Ans - 
a) Dealing with pop ups since they can appear based on user profiles or browser type or any other condition.
popup = @driver.switch_to.alert
popup.dismiss //for cancel
popup.accept //ok button
popup.sendKeys("abcd") //to enter data
b) Dealing with Java applet data entry / actions on web page. Resolved by implementing mSTAX framework which is IBM proprietary, so
will not be able to talk more on it
c) Sync issues, since sometimes a page can take longer to load so the elements might not be found. Use below command:
WebDriverWait wait = new WebDriverWait(driver,10);
Webelement element = wait.Until(ExpectedConditions.presenceOfElementLocated(<Element Locator>));

Other conditions that can be used with ExpectedConditions:
elementToBeClickable
visibilityOfElementLocated
attributeContains
alertIsPresent
textToBePresentInElementLocated

Dropdown Selections:
Select dropDownName = new Select(driver.findElement(By.name("countries")));
dropDownName.selectByVisibleText("India");
dropDownName.selectByID("1");
dropDownName.selectByValue("IND");

Execute JavaScript in Selenium
JavaScriptExecutor js = ((JavascriptExecutor) driver) //typecast the driver as js type
js.executeScript("{java script to be executed}")

Difference b/w close and quit command = close will close only currently focused browser instance, quit closes all instances.
Difference between navigate and get = get will wait for all elements to be loaded before executing next line of code. Also, navigate 
can be used with other commands like back, forward, refresh etc.

To handle multiple child windows, use the command getWindowHandles()

Frame navigation:
driver.switchTo().frame("frameID");
For locating a frame we can use the index (starting from 0) or it's name/ID

----------------------------------------------------------
Insurance Tool Specific tools:
EBIX
-------
Standalone client and policy management system
Cloud based tool for insurance products
Provides access to large number of business processing capabilities for insurance clients
It's Life & Annuity offerings include Enterprise CRM, New Business & Underwriting, Policy Delivery, Policy Administration etc.
Common functions :
Customer-
	Add New Customer-
	Search Customer-
Quotes-
	Add New Quote
	Search Quote
Policies-
	Add New Policy
	Find Policy
	Renew Policy
	Import Policy
	Cancel Policy
Administration
	My Details
	Print Queue ( to print policy documents of any customer )
	Configuration
Insurance Sync downloads book of business eg. policies and cases from different insurance carriers for x # of years
Insurance Sync dashboard provides graph tools to slice the data in various ways
Insurance Sync Pending Cases
Insurance SYnc in force policies
Some of the fields in the above 2 mentioned sections include Case ID, Policy holder details like demographic details & Contact details; 
case status; Benefit amount; Premium amount etc
Cross Marketing tab provides more detail analysis like policies expiring in next 90 days etc; prospect client details.
Also provides integration capabilities with other systems as required

ALIP
--------
Accenture Life Insurance and Annuity Platform
Scalabale software suite that provides solutions to meet needs ranging from booking new business to claims payout
Policy administration system for annuity business
Automates operations across the policy life cycle
Supports the following functions:
	New Business & Case Management
	Underwriting
	Policy Administration
	Claims Payout

To read data from XML:
Document doc;
DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
DocumentBuilder builder = factory.newDocumentBuilder();                   

//Parsing of xml is done here
doc = builder.parse(new File("<Path of XML File>"));
NodeList applicationElement = doc.getElementsByTagName(<tagName>);
<variableName> = applicationElement.item(0).getTextContent().trim();
